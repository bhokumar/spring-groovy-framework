plugins {
	id 'org.springframework.boot' version '2.3.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'groovy'
	id 'java-library'
	id 'maven-publish'
	id 'signing'
}

group = 'com.github.bhokumar.sample.annotation'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation localGroovy()
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.codehaus.groovy:groovy'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}


test {
	useJUnitPlatform()
}


task sourceJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

signing {
	sign configurations.archives
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			customizePom(pom)
			groupId 'com.github.bhokumar.framework'
			artifactId 'sample-spring-boot-annotation'
			version '0.0.2'

			from components.java

			pom.withXml {
				def pomFile = file("${project.buildDir}/generated-pom.xml")
				writeTo(pomFile)
				def pomAscFile = signing.sign(pomFile).signatureFiles[0]
				artifact(pomAscFile) {
					classifier = null
					extension = 'pom.asc'
				}
			}
			artifact(sourceJar) {
				classifier = 'sources'
			}
			artifact(javadocJar) {
				classifier = 'javadoc'
			}

			// create the signed artifacts
			project.tasks.signArchives.signatureFiles.each {
				artifact(it) {
					def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
					if (matcher.find()) {
						classifier = matcher.group(1)
					} else {
						classifier = null
					}
					extension = 'jar.asc'
				}
			}

		}
	}

	repositories {
		maven {
			url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
			credentials {
				username ossrhUsername
				password ossrhPassword
			}
		}
	}
}

def customizePom(pom) {
	pom.withXml {
		def root = asNode()

		// eliminate test-scoped dependencies (no need in maven central POMs)
		root.dependencies.removeAll { dep ->
			dep.scope == "test"
		}

		// add all items necessary for maven central publication
		root.children().last() + {
			resolveStrategy = Closure.DELEGATE_FIRST

			description 'Serialize and Deserialize Json-LD into Java entities'
			name 'Schema.org Java'
			url 'https://github.com/bhokumar/show-date-gradle-plugin'
			organization {
				name 'com.github.bhokumar'
				url 'https://github.com/bhokumar'
			}
			issueManagement {
				system 'GitHub'
				url 'https://github.com/bhokumar/show-date-gradle-plugin/issues'
			}
			licenses {
				license {
					name 'MIT License'
					url 'https://github.com/bhokumar/show-date-gradle-plugin/blob/master/LICENSE'
					distribution 'repo'
				}
			}
			scm {
				url 'https://github.com/bhokumar/show-date-gradle-plugin'
				connection 'scm:git:git://github.com/bhokumar/show-date-gradle-plugin.git'
				developerConnection 'scm:git:ssh://git@github.com:bhokumar/show-date-gradle-plugin.git'
			}
			developers {
				developer {
					name 'bhoopendra'
				}
			}
		}
	}
}

model {
	tasks.generatePomFileForMavenJavaPublication {
		destination = file("$buildDir/generated-pom.xml")
	}
	tasks.publishMavenJavaPublicationToMavenLocal {
		dependsOn project.tasks.signArchives
	}
	tasks.publishMavenJavaPublicationToMavenRepository {
		dependsOn project.tasks.signArchives
	}
}

apply plugin: 'groovy'

